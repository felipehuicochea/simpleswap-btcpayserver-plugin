@using BTCPayServer.Plugins.SimpleSwap.Services
@inject SimpleSwapPluginService SimpleSwapPluginService
@{
    var storeId = Context.GetRouteValue("storeId")?.ToString();
    if (string.IsNullOrEmpty(storeId))
        return;
    
    var settings = await SimpleSwapPluginService.GetStoreSettings(storeId);
    if (!settings.Enabled || settings.AcceptedCryptos == null || !settings.AcceptedCryptos.Any())
        return;
}

<div class="payment-method-content" data-payment-method="simpleswap" style="display: none;">
    <div class="payment-method-content__header">
        <div class="payment-method-content__header-title">Pay with Altcoins via SimpleSwap</div>
        <div class="payment-method-content__header-subtitle">Select your preferred cryptocurrency to complete the payment</div>
    </div>
    
    <div class="payment-method-content__body">
        <div class="form-group">
            <label class="form-label">Select Cryptocurrency</label>
            <select id="simpleswap-crypto-select" class="form-select">
                <option value="">Choose a cryptocurrency...</option>
                @foreach (var crypto in settings.AcceptedCryptos)
                {
                    <option value="@crypto">@crypto</option>
                }
            </select>
        </div>
        
        <div id="simpleswap-payment-details" style="display: none;">
            <div class="alert alert-info">
                <div class="d-flex align-items-center">
                    <div class="me-3">
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                    <div>
                        <strong>Creating swap...</strong>
                        <div>Please wait while we create your SimpleSwap transaction.</div>
                    </div>
                </div>
            </div>
            
            <div id="simpleswap-payment-address" style="display: none;">
                <div class="form-group">
                    <label class="form-label">Send Payment To</label>
                    <div class="input-group">
                        <input type="text" id="simpleswap-address" class="form-control" readonly />
                        <button type="button" class="btn btn-outline-secondary" onclick="copyToClipboard('simpleswap-address')">
                            <i class="fa fa-copy"></i>
                        </button>
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Amount to Send</label>
                    <input type="text" id="simpleswap-amount" class="form-control" readonly />
                </div>
                
                <div class="alert alert-warning">
                    <i class="fa fa-exclamation-triangle me-2"></i>
                    <strong>Important:</strong> Send exactly the amount shown above to the address provided. 
                    Any difference may result in a failed transaction.
                </div>
                
                <div class="form-group">
                    <button type="button" id="simpleswap-check-status" class="btn btn-primary" onclick="checkSwapStatus()">
                        Check Payment Status
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let currentSwapId = null;
let statusCheckInterval = null;

document.getElementById('simpleswap-crypto-select').addEventListener('change', function() {
    const selectedCrypto = this.value;
    if (selectedCrypto) {
        createSwap(selectedCrypto);
    } else {
        hidePaymentDetails();
    }
});

async function createSwap(fromCrypto) {
    const paymentDetails = document.getElementById('simpleswap-payment-details');
    const paymentAddress = document.getElementById('simpleswap-payment-address');
    
    paymentDetails.style.display = 'block';
    paymentAddress.style.display = 'none';
    
    try {
        const response = await fetch('/plugins/SimpleSwap/CreateSwap', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                storeId: '@storeId',
                fromCrypto: fromCrypto,
                fromNetwork: fromCrypto,
                amount: window.btcpayServerModel.amount,
                toAddress: window.btcpayServerModel.btcAddress
            })
        });
        
        const result = await response.json();
        
        if (response.ok) {
            currentSwapId = result.swapId;
            document.getElementById('simpleswap-address').value = result.fromAddress;
            document.getElementById('simpleswap-amount').value = result.amount + ' ' + fromCrypto;
            paymentAddress.style.display = 'block';
            
            // Start checking status
            statusCheckInterval = setInterval(checkSwapStatus, 30000); // Check every 30 seconds
        } else {
            throw new Error(result.error || 'Failed to create swap');
        }
    } catch (error) {
        console.error('Error creating swap:', error);
        paymentDetails.innerHTML = `
            <div class="alert alert-danger">
                <i class="fa fa-exclamation-circle me-2"></i>
                <strong>Error:</strong> ${error.message}
            </div>
        `;
    }
}

async function checkSwapStatus() {
    if (!currentSwapId) return;
    
    try {
        const response = await fetch(`/plugins/SimpleSwap/GetSwapStatus/${currentSwapId}`);
        const result = await response.json();
        
        if (response.ok) {
            if (result.status === 'completed') {
                clearInterval(statusCheckInterval);
                document.getElementById('simpleswap-payment-details').innerHTML = `
                    <div class="alert alert-success">
                        <i class="fa fa-check-circle me-2"></i>
                        <strong>Payment Complete!</strong> Your transaction has been processed successfully.
                    </div>
                `;
                // Trigger BTCPayServer payment completion
                if (window.btcpayServerModel && window.btcpayServerModel.onPaymentComplete) {
                    window.btcpayServerModel.onPaymentComplete();
                }
            } else if (result.status === 'failed') {
                clearInterval(statusCheckInterval);
                document.getElementById('simpleswap-payment-details').innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fa fa-exclamation-circle me-2"></i>
                        <strong>Payment Failed:</strong> The transaction could not be completed.
                    </div>
                `;
            }
        }
    } catch (error) {
        console.error('Error checking swap status:', error);
    }
}

function hidePaymentDetails() {
    document.getElementById('simpleswap-payment-details').style.display = 'none';
    if (statusCheckInterval) {
        clearInterval(statusCheckInterval);
        statusCheckInterval = null;
    }
    currentSwapId = null;
}

function copyToClipboard(elementId) {
    const element = document.getElementById(elementId);
    element.select();
    element.setSelectionRange(0, 99999);
    document.execCommand('copy');
    
    // Show feedback
    const button = element.nextElementSibling;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fa fa-check"></i>';
    setTimeout(() => {
        button.innerHTML = originalText;
    }, 2000);
}
</script> 